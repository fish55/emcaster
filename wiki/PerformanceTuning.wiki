= Introduction =

Achieving maximum throughput often takes a fair amount of research and tweaking. With modest production hardware and a gigabit network you should expect to be able to send at rates over 500 megabit per second. Generally, smaller messages require more CPU and larger messages require more bandwidth. Smaller messages result in higher message rates (100's of k per second), while larger messages use more bandwidth.

=== Serialization ===

.NET serialization is not particularly fast, so if you are attempting to send at high rates avoid serialization.  As an alternative, raw [http://groups.google.com/group/microsoft.public.dotnet.languages.csharp/msg/7e43c0f0613adce1 Struct Serialization] is incredibly fast.

The Emcaster TopicPublisher object provides methods for publishing objects or raw bytes. Obviously, the raw bytes method is the fastest sending method. The object publishing method just uses default .NET serialization.


=== Batching ===
Emcaster automatically batches outgoing messages to optimize network writes. A separate thread is used to flush the bytes to the network. The AsyncByteWriter class contains several  methods that may need to be tweaked for hardware and network differences.
  * [http://emcaster.googlecode.com/svn/trunk/Emcaster/Sockets/AsyncByteWriter.cs AsyncByteWriter] 

=== Buffering ===
The pgm senders and receivers have buffers that may need to be increased to accommodate larger loads. 
  * [http://emcaster.googlecode.com/svn/trunk/Emcaster/Sockets/PgmReceiver.cs PgmReceiver]
  * [http://emcaster.googlecode.com/svn/trunk/Emcaster/Sockets/PgmSource.cs PgmSource]
  * [http://emcaster.googlecode.com/svn/trunk/Emcaster/Sockets/SourceReader.cs SourceReader]