= Topic Subscriber=

To receive messages, the subscriber must be listening on the same multicast address and port as the source. The TopicSubscriber class subscribes to the [EmcasterTopics EmcasterTopic] with a regular expression.

{{{
using Emcaster.Sockets;
using Emcaster.Topics;

MessageParserFactory msgParser = new MessageParserFactory();
PgmReader reader = new PgmReader(msgParser);
PgmReceiver receiveSocket = new PgmReceiver("224.0.0.23", 7272, reader);

TopicSubscriber topicSubscriber = new TopicSubscriber("Stock-Quotes-AAPL", msgParser);
topicSubscriber.TopicMessageEvent += YourDelegateMethod;
topicSubscriber.Start();
receiveSocket.Start();
}}}

== Your Delegate Method ==
Your method should be thread safe. With multiple sources, the method will be called from multiple threads. Do not retain a reference to the parser object since it is reused between objects. 

= Topic Queue Subscriber =

A Topic Queue Subscription enqueues messages in a single capped queue. This makes it easy to process messages in batch. The Dequeue method is thread safe, so with a multi-core machine, multiple threads can be used to process cpu intensive messages. 

{{{
TopicSubscriber topic= ... create a subscriber
topic.Start();
int maxQueueSize = 100000;
TopicQueueSubscriber queue = new TopicQueueSubscriber(topic, maxQueueSize);
while(true)
{
   int maxTimeToWaitForMessage = 1000;
   List<IMessageParser> msgBatch = queue.Dequeue(maxTimeToWaitForMessage);
   ... do something with messages
}
}}}